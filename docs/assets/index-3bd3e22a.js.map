{"version":3,"file":"index-3bd3e22a.js","sources":["../../src/03.formComponents/XInput/XInput.styles.ts","../../src/03.formComponents/XInput/XToggleEye/XToggleEye.tsx","../../src/03.formComponents/XInput/XInput.tsx","../../src/03.formComponents/XInput/useXInput.ts","../../src/03.formComponents/XInput/index.tsx"],"sourcesContent":["import styled, { css } from 'styled-components'\nimport XInputTypes from './XInput.types'\nimport { XEye } from '../../01.icons/XEye/XEye.styles'\nimport { XEyeClose } from '../../01.icons/XEyeClose/XEyeClose.styles'\n\nconst hasDisabled = ({ disabled, simple }: Pick<XInputTypes, 'disabled' | 'simple'>) => (\n  (disabled && !simple && css`\n    border-image-source: var(--simple-border-image-source-disabled);\n    color: var(--color-disabled);\n  `) || (disabled && simple && css`\n    border-color: var(--color-disabled);\n    color: var(--color-disabled);\n  `)\n)\n\nconst hasError = ({ error, simple }: Pick<XInputTypes, 'error' | 'simple'>) => (\n  (error && !simple && css`\n    border-image-source: var(--simple-border-image-source-error);\n  `) || (error && simple && css`\n    border-color: var(--color-error);\n  `)\n)\n\nconst hasWarning = ({ warning, simple }: Pick<XInputTypes, 'warning' | 'simple'>) => (\n  (warning && !simple && css`\n    border-image-source: var(--simple-border-image-source-warning);\n  `) || (warning && simple && css`\n    border-color: var(--color-warning);\n  `)\n)\n\nconst hasSuccess = ({ success, simple }: Pick<XInputTypes, 'success' | 'simple'>) => (\n  (success && !simple && css`\n    border-image-source: var(--simple-border-image-source-success);\n  `) || (success && simple && css`\n    border-color: var(--color-success);\n  `)\n)\n\nconst hasPrimary = ({ primary, simple }: Pick<XInputTypes, 'primary' | 'simple'>) => (\n  (primary && !simple && css`\n    border-image-source: var(--simple-border-image-source-primary);\n  `) || (primary && simple && css`\n    border-color: var(--color-primary);\n  `)\n)\n\nconst hasSimple = ({ simple }: Pick<XInputTypes, 'simple'>) => simple && css`\n  border-image-slice: fill;\n  border-image-width: none;\n  border-image-repeat: stretch;\n  border-image-source: none;\n  border-image-outset: 0;\n  border-style: solid;\n  border-color: var(--color-white);\n`\n\n\nexport const XInput = styled.input<XInputTypes>`\n  background-color: transparent;\n  border-image-slice: 2;\n  border-image-width: 2;\n  border-image-repeat: stretch;\n  border-image-source: var(--simple-border-image-source-white);\n  border-image-outset: 1;\n  border-style: solid;\n  border-width: var(--border-width);\n  font-family: 'FontPxRegular', sans-serif;\n  color: var(--colo-white);\n  padding: var(--gap-small);\n  transition: 100ms transform ease-in-out;\n  box-sizing: border-box;\n  width: 100%;\n  \n  &:focus {\n    outline: none;\n  }\n  \n  ${hasSimple};\n  ${hasPrimary};\n  ${hasSuccess};\n  ${hasWarning};\n  ${hasError};\n  ${hasDisabled};\n`\n\nconst typePassword = ({ isPassword = false }: Pick<XInputTypes, 'isPassword'>) => isPassword && css`\n  & > ${XInput} {\n    font-family: \"Press Start 2P\", sans-serif;\n    height: 4.1rem;\n    padding-right: 4.8rem;\n  } \n\n  & > ${XEye}, & > ${XEyeClose} {\n    position: absolute;\n    right: var(--gap-medium);\n    cursor: var(--cursor-pointer);\n    transition: transform 100ms ease-in-out;\n\n    &:hover {\n      transform: scale(1.2);\n    }\n  }\n`\n\nconst Password = styled.div<Pick<XInputTypes, 'show' | 'type' | 'isPassword'>>`\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  ${typePassword};\n`\n\nconst S = {\n  Password,\n  XInput\n}\n\nexport default S","import XEye from '../../../01.icons/XEye'\nimport XEyeClose from '../../../01.icons/XEyeClose'\nimport XToggleEyeTypes from './XToggleEye.types'\n\nconst XToggleEye = ({ onClick, show }: XToggleEyeTypes) => show ? (\n  < XEyeClose onClick={onClick} />\n) : (\n  <XEye onClick={onClick} />\n)\n\nexport default XToggleEye","import XInputTypes from './XInput.types'\nimport S from './XInput.styles'\nimport XEye from '../../01.icons/XEye'\nimport XToggleEye from './XToggleEye'\n\nconst XInput = (props: XInputTypes) => props.isPassword ? (\n  <S.Password show={props.show} type={props.type} isPassword={props.isPassword}>\n    <S.XInput {...props} />\n    <XToggleEye onClick={props.toggleShow} show={props.show} />\n  </S.Password>\n) : (\n  <S.XInput {...props} />\n)\n\nexport default XInput","import { useState } from \"react\"\n\nconst useXInput = (argType: string) => {\n  const isPassword = argType === 'password'\n  const [show, setShow] = useState(false)\n  const [type, setType] = useState(argType)\n\n  const toggleShow = () => {\n    if (type === 'password') {\n      setShow(true)\n      setType('text')\n    } else {\n      setShow(false)\n      setType('password')\n    }\n  }\n\n  return {\n    isPassword,\n    show,\n    type,\n    toggleShow\n  }\n}\n\nexport default useXInput","import XInput from './XInput'\nimport XInputTypes from './XInput.types'\nimport useXInput from './useXInput'\n\nexport default (props: XInputTypes) => {\n  const { show, type, isPassword, toggleShow } = useXInput(props.type)\n\n  return (\n    <XInput\n      {...props}\n      show={show}\n      type={type}\n      isPassword={isPassword}\n      toggleShow={toggleShow}\n    />\n  )\n}"],"names":["hasDisabled","disabled","simple","css","hasError","error","hasWarning","warning","hasSuccess","success","hasPrimary","primary","hasSimple","XInput","styled","typePassword","isPassword","XEye","XEyeClose","Password","S","XToggleEye","onClick","show","jsx","props","jsxs","useXInput","argType","setShow","useState","type","setType","toggleShow"],"mappings":"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"}