/// <reference types="react" />
/// <reference types="react" />
import XFileTypes from './XFile.types';
export declare const XFile: import("styled-components").IStyledComponent<"web", {
    full?: boolean | undefined;
    primary?: boolean | undefined;
    success?: boolean | undefined;
    warning?: boolean | undefined;
    error?: boolean | undefined;
    disabled?: boolean | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    name?: string | undefined;
    type?: "button" | "submit" | "reset" | undefined;
    value?: string | number | readonly string[] | undefined;
    color?: string | undefined;
    content?: string | undefined;
    translate?: "yes" | "no" | undefined;
    form?: string | undefined;
    slot?: string | undefined;
    style?: import("react").CSSProperties | undefined;
    title?: string | undefined;
    children?: import("react").ReactNode;
    onClick?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    key?: import("react").Key | null | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    placeholder?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    tabIndex?: number | undefined;
    radioGroup?: string | undefined;
    role?: import("react").AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "search" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "true" | "false") | undefined;
    'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
    'aria-braillelabel'?: string | undefined;
    'aria-brailleroledescription'?: string | undefined;
    'aria-busy'?: (boolean | "true" | "false") | undefined;
    'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colindextext'?: string | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "page" | "time" | "true" | "false" | "step" | "location" | "date" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-description'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-disabled'?: (boolean | "true" | "false") | undefined;
    'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: (boolean | "true" | "false") | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "true" | "false") | undefined;
    'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "true" | "false" | "listbox" | "tree" | undefined;
    'aria-hidden'?: (boolean | "true" | "false") | undefined;
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "true" | "false") | undefined;
    'aria-multiline'?: (boolean | "true" | "false") | undefined;
    'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-readonly'?: (boolean | "true" | "false") | undefined;
    'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "true" | "false") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowindextext'?: string | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: (boolean | "true" | "false") | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
    onCut?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
    onPaste?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
    onFocus?: import("react").FocusEventHandler<HTMLLabelElement> | undefined;
    onFocusCapture?: import("react").FocusEventHandler<HTMLLabelElement> | undefined;
    onBlur?: import("react").FocusEventHandler<HTMLLabelElement> | undefined;
    onBlurCapture?: import("react").FocusEventHandler<HTMLLabelElement> | undefined;
    onChange?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onChangeCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onBeforeInput?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onInput?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onInputCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onReset?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onResetCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onSubmit?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onSubmitCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onInvalid?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onInvalidCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onLoad?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onError?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onErrorCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
    onAbort?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onAbortCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onCanPlay?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onDurationChange?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onEmptied?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onEncrypted?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onEnded?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onEndedCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadedData?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadStart?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onPause?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onPauseCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onPlay?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onPlaying?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onProgress?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onProgressCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onRateChange?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onResize?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onResizeCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSeeked?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSeeking?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onStalled?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onStalledCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSuspend?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onVolumeChange?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onWaiting?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onAuxClick?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onClickCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onContextMenu?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onDoubleClick?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onDrag?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragEnd?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragEndCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragEnter?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragExit?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragExitCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragLeave?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragOver?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragOverCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragStart?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragStartCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDrop?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDropCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onMouseDown?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseEnter?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseLeave?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseMove?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseOut?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseOver?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseUp?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onSelect?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSelectCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onTouchCancel?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchEnd?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchMove?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchStart?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onPointerDown?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerMove?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerUp?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerCancel?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerEnter?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerLeave?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerOver?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerOut?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onScroll?: import("react").UIEventHandler<HTMLLabelElement> | undefined;
    onScrollCapture?: import("react").UIEventHandler<HTMLLabelElement> | undefined;
    onWheel?: import("react").WheelEventHandler<HTMLLabelElement> | undefined;
    onWheelCapture?: import("react").WheelEventHandler<HTMLLabelElement> | undefined;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLLabelElement> | undefined;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLLabelElement> | undefined;
    htmlFor?: string | undefined;
    ref?: ((instance: HTMLLabelElement | null) => void) | import("react").RefObject<HTMLLabelElement> | null | undefined;
}>;
declare const S: {
    WrapperXFile: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLDivElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "search" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "page" | "time" | "true" | "false" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "true" | "false" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
    }>;
    WrapperInput: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLDivElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "search" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "page" | "time" | "true" | "false" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "true" | "false" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
    }>;
    XFile: import("styled-components").IStyledComponent<"web", {
        full?: boolean | undefined;
        primary?: boolean | undefined;
        success?: boolean | undefined;
        warning?: boolean | undefined;
        error?: boolean | undefined;
        disabled?: boolean | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        name?: string | undefined;
        type?: "button" | "submit" | "reset" | undefined;
        value?: string | number | readonly string[] | undefined;
        color?: string | undefined;
        content?: string | undefined;
        translate?: "yes" | "no" | undefined;
        form?: string | undefined;
        slot?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        children?: import("react").ReactNode;
        onClick?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "search" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "page" | "time" | "true" | "false" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "true" | "false" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLLabelElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLLabelElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLLabelElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLLabelElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLLabelElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLLabelElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLLabelElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLLabelElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLLabelElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLLabelElement> | undefined;
        htmlFor?: string | undefined;
        ref?: ((instance: HTMLLabelElement | null) => void) | import("react").RefObject<HTMLLabelElement> | null | undefined;
    }>;
    Arrow: import("styled-components").IStyledComponent<"web", {
        color?: string | undefined;
        content?: string | undefined;
        height?: string | number | undefined;
        translate?: "yes" | "no" | undefined;
        width?: string | number | undefined;
        slot?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        children?: import("react").ReactNode;
        onClick?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "search" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "page" | "time" | "true" | "false" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "true" | "false" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLImageElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLImageElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLImageElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLImageElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLImageElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLImageElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLImageElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLImageElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLImageElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLImageElement> | undefined;
        crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
        referrerPolicy?: import("react").HTMLAttributeReferrerPolicy | undefined;
        sizes?: string | undefined;
        alt?: string | undefined;
        src?: string | undefined;
        loading?: "eager" | "lazy" | undefined;
        decoding?: "async" | "auto" | "sync" | undefined;
        srcSet?: string | undefined;
        useMap?: string | undefined;
        ref?: ((instance: HTMLImageElement | null) => void) | import("react").RefObject<HTMLImageElement> | null | undefined;
        right?: boolean | undefined;
        down?: boolean | undefined;
        left?: boolean | undefined;
        up?: boolean | undefined;
        primary?: boolean | undefined;
        success?: boolean | undefined;
        warning?: boolean | undefined;
        error?: boolean | undefined;
        disabled?: boolean | undefined;
        runningArrowAnimation?: boolean | undefined;
    }>;
    ShowFiles: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLOutputElement> | undefined;
        key?: import("react").Key | null | undefined;
        form?: string | undefined;
        htmlFor?: string | undefined;
        name?: string | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "search" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "page" | "time" | "true" | "false" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "true" | "false" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLOutputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLOutputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLOutputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLOutputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLOutputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLOutputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLOutputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLOutputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLOutputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLOutputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLOutputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLOutputElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLOutputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLOutputElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLOutputElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLOutputElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLOutputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLOutputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLOutputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLOutputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLOutputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLOutputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLOutputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLOutputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLOutputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLOutputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLOutputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLOutputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLOutputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLOutputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLOutputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLOutputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLOutputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLOutputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLOutputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLOutputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLOutputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLOutputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLOutputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLOutputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLOutputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLOutputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLOutputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLOutputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLOutputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLOutputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLOutputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLOutputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLOutputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLOutputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLOutputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLOutputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLOutputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLOutputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLOutputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLOutputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLOutputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLOutputElement> | undefined;
    }>;
    Carousel: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, Pick<XFileTypes, "moveAnimation">>>;
    Input: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLInputElement> | undefined;
        key?: import("react").Key | null | undefined;
        accept?: string | undefined;
        alt?: string | undefined;
        autoComplete?: string | undefined;
        capture?: boolean | "user" | "environment" | undefined;
        checked?: boolean | undefined;
        crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
        disabled?: boolean | undefined;
        enterKeyHint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send" | undefined;
        form?: string | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        height?: string | number | undefined;
        list?: string | undefined;
        max?: string | number | undefined;
        maxLength?: number | undefined;
        min?: string | number | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        name?: string | undefined;
        pattern?: string | undefined;
        placeholder?: string | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        size?: number | undefined;
        src?: string | undefined;
        step?: string | number | undefined;
        type?: import("react").HTMLInputTypeAttribute | undefined;
        value?: string | number | readonly string[] | undefined;
        width?: string | number | undefined;
        onChange?: import("react").ChangeEventHandler<HTMLInputElement> | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "search" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "page" | "time" | "true" | "false" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "true" | "false" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
    }>;
    Close: import("styled-components").IStyledComponent<"web", {
        color?: string | undefined;
        content?: string | undefined;
        height?: string | number | undefined;
        translate?: "yes" | "no" | undefined;
        width?: string | number | undefined;
        slot?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        children?: import("react").ReactNode;
        onClick?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "search" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "page" | "time" | "true" | "false" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "true" | "false" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLImageElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLImageElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLImageElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLImageElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLImageElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLImageElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLImageElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLImageElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLImageElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLImageElement> | undefined;
        crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
        referrerPolicy?: import("react").HTMLAttributeReferrerPolicy | undefined;
        sizes?: string | undefined;
        alt?: string | undefined;
        src?: string | undefined;
        loading?: "eager" | "lazy" | undefined;
        decoding?: "async" | "auto" | "sync" | undefined;
        srcSet?: string | undefined;
        useMap?: string | undefined;
        ref?: ((instance: HTMLImageElement | null) => void) | import("react").RefObject<HTMLImageElement> | null | undefined;
    }>;
};
export default S;
